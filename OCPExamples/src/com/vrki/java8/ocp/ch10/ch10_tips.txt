---------------------------------------------------------------------------------------------------------------------------------
*** Chapter 10 - JDBC
---------------------------------------------------------------------------------------------------------------------------------

What we cover is enough for the exam. To be ready to use JDBC on the job, we recommend that you read books on SQL along with Java
and databases. For example, you might try SQL For Dummies by Allen G. Taylor (Wiley, 2013) and Practical Database Programming 
with Java by Ying Bai (Wiley-IEEE Press, 2011).

For Experienced Developers:

- You are likely using a DataSource. For the exam, you have to remember or relearn how DriverManager works.

- You might know that you can skip Class.forName on a JDBC 3.0 driver that was ahead of its time in including the java.sql.Driver
file in addition to the public driver class. For the exam, go with the simplified view of the world that says it is mandatory. Of
course, you would probably be using a DataSource in the first place, making this a moot point.

- The exam talks about Statement. You should be using PreparedStatement in real code 

-Yes, we know that you use the default values for the ResultSet modes virtually all the time, and you probably don’t know the 
alternatives by heart. For the exam, you have to memorize them.

- You’ll probably never use Scrollable outside the exam, but you have to learn it in detail anyway.


---------------------------------------------------------------------------------------------------------------------------------
** Introducing Relational Databases and SQL
---------------------------------------------------------------------------------------------------------------------------------

There are two main ways to access a relational database from Java:

- Java Database Connectivity Language (JDBC): Accesses data as rows and columns.
- Java Persistence API (JPA): Accesses data through Java objects using a concept called object-relational mapping (ORM).

Java comes with an embedded database called JavaDB. JavaDB is a version of the open source Derby database that comes 
automatically with the JDK (http://db.apache.org/derby).

There are also stand-alone databases that you can choose from if you want to install one. We like MySQL (https://www.mysql.com) 
or PostgreSQL (http://www.postgresql.org), both of which are open source and have been around for more than 20 years.

---------------------------------------------------------------------------------------------------------------------------------
* The Code to Set Up the Database
---------------------------------------------------------------------------------------------------------------------------------

Before running the following code, you need to add a .jar file to your classpath. Add <JAVA_HOME>/db/lib/derby.jar to your 
classpath. Just make sure to replace <JAVA_HOME> with the actual path on your file system.

java -cp "c:\program files\jdk\db\lib\derby.jar;." SetupDerbyDatabase

SetupDerbyDatabase.java:
import java.sql.*;
public class SetupDerbyDatabase {
public static void main(String[] args) throws Exception {
String url = "jdbc:derby:zoo;create=true";
try (Connection conn = DriverManager.getConnection(url);
Statement stmt = conn.createStatement()) {
stmt.executeUpdate("CREATE TABLE species ("
+ "id INTEGER PRIMARY KEY, "
+ "name VARCHAR(255), "
+ "num_acres DECIMAL)");
stmt.executeUpdate(
"CREATE TABLE animal ("
+ "id INTEGER PRIMARY KEY, "
+ "species_id integer, "
+ "name VARCHAR(255), "
+ "date_born TIMESTAMP)");
stmt.executeUpdate("INSERT INTO species VALUES (1, 'African Elephant', 7.5)");
stmt.executeUpdate("INSERT INTO species VALUES (2, 'Zebra', 1.2)");
stmt.executeUpdate("INSERT INTO animal VALUES (1, 1, 'Elsa', '2001-05-06 02:15:00')");
stmt.executeUpdate("INSERT INTO animal VALUES (2, 2, 'Zelda', '2002-08-15 09:12:00')");
stmt.executeUpdate("INSERT INTO animal VALUES (3, 1, 'Ester', '2002-09-09 10:36:00')");
stmt.executeUpdate("INSERT INTO animal VALUES (4, 1, 'Eddie', '2010-06-08 01:24:00')");
stmt.executeUpdate("INSERT INTO animal VALUES (5, 2, 'Zoe', '2005-11-12 03:44:00')");
}
}
}

---------------------------------------------------------------------------------------------------------------------------------
* Introducing the Interfaces of JDBC
---------------------------------------------------------------------------------------------------------------------------------

With JDBC, you use only the interfaces in your code and never the implementation classes directly. In fact, they might not even 
be public classes.

Four Key Interfaces in java.sql package related to JDBC:
		Interfaces in JDK --> Implementation in the driver
		Driver					FooDriver
		Connection				FooConnection
		Statement				FooStatement
		ResultSet				FooResultSet
	
What do these four interfaces do? On a very high level, we have the following:
	Driver: Knows how to get a connection to the database
	Connection: Knows how to communicate with the database
	Statement: Knows how to run the SQL
	ResultSet: Knows what was returned by a SELECT query

All database classes are in the package java.sql

*** Caused by: ERROR XSDB6: Another instance of Derby may have already booted the database C:\Users\vrki\git\OCP\OCPExamples\zoo.

---------------------------------------------------------------------------------------------------------------------------------
** Connecting to a Database
---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
* Building a JDBC URL
---------------------------------------------------------------------------------------------------------------------------------

The JDBC URL format:

Protocol <Colon Separator> Product/Vendor name <Colon Separator>  Database Specific Connection Details
jdbc:postgres://localhost:5432/zoo

other examples;
jdbc:postgresql://localhost/zoo
jdbc:oracle:thin:@123.123.123.123:1521:zoo
jdbc:mysql://localhost:3306/zoo?profileSQL=true

Also notice that the port is optional when using the default.

---------------------------------------------------------------------------------------------------------------------------------
* Getting a Database Connection
---------------------------------------------------------------------------------------------------------------------------------

There are two main ways to get a Connection: DriverManager or DataSource:
- DriverManager is the one covered on the exam. Do not use a DriverManager in code someone is paying you to write. 
- DataSource is a factory, and it has more features than DriverManager. For example, it can pool connections or store the 
database connection info outside the application.

To get a Connection from the embedded database, you write the following:

import java.sql.*;

public class TestConnect {
	public static void main(String[] args) throws SQLException {
		Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
		System.out.println(conn);
	}
}


There is also a signature that takes a username and password:

import java.sql.*;

public class TestExternal {
	public static void main(String[] args) throws SQLException {
		Connection conn = DriverManager.getConnection(
			"jdbc:postgresql://localhost:5432/ocp-book",
			"username",
			"password");
		System.out.println(conn);
	}
}


The DriverManager class looks through the classpath for JARs that contain a Driver. DriverManager knows that a JAR is a driver 
because it contains a file called java.sql.Driver in the directory META-INF/services. 
In other words, a driver might contain this information:

META-INF
-service
-java.sql.Driver
com
-wiley
-MyDriver.class

Inside the java.sql.Driver file is one line. It is the fully qualified package name of the Driver implementation class. Remember
those four key interfaces? Driver is the first one. DriverManager then looks through any drivers it can find to see if they can
handle the JDBC URL. If so, it creates a Connection using that Driver. If not, it gives up and throws a SQLException.

Real World Scenario:

Using a DataSource

In real applications, you should use a DataSource rather than DriverManager to get a Connection. For one thing, there’s no reason
why you should have to know the database password. It’s far better if the database team or another team can set up a data source
that you can reference. Another reason is that a DataSource maintains a connection pool so that you can keep reusing the same
connection rather than needing to get a new one each time. Even the JavaDoc says DataSource is preferred over DriverManager. But
DriverManager is in the exam objectives, so you still have to know it.

https://db.apache.org/derby/docs/10.14/publishedapi/index.html


You might see Class.forName() used in older code before getting a Connection. It looked like this:

public static void main(String[] args) throws SQLException, ClassNotFoundException {
	Class.forName("org.postgresql.Driver");
	Connection conn = DriverManager.getConnection(
		"jdbc:postgresql://localhost:5432/ocp-book",
		"username",
		"password");
}

Class.forName() loads a class. This lets DriverManager use a Driver, even if the JAR doesn’t have a META-INF/service/java.sql.Driver
file. There’s no harm in including Class.forName(), even if the newer driver does have this file When Class.forName() is used, the
error about an invalid class occurs on that line and throws a ClassNotFoundException:

public static void main(String[] args) throws ClassNotFoundException {
	Class.forName("not.a.driver");
}


Having META-INF/service/java.sql.Driver inside the JAR became mandatory with JDBC 4.0 in Java 6. Before that, some drivers included
it and some didn’t.


---------------------------------------------------------------------------------------------------------------------------------
** Obtaining a Statement
---------------------------------------------------------------------------------------------------------------------------------

Statement stmt = conn.createStatement();

Statement stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);

This signature takes two parameters. The first is the ResultSet type, and the other is the ResultSet concurrency mode.

---------------------------------------------------------------------------------------------------------------------------------
* Choosing a ResultSet Type
---------------------------------------------------------------------------------------------------------------------------------

By default, a ResultSet is in TYPE_FORWARD_ONLY mode. This is what you need most of the time. You can go through the data once in
the order in which it was retrieved.

Two other modes that you can request when creating a Statement are TYPE_SCROLL_INSENSITIVE and TYPE_SCROLL_SENSITIVE. Both allow
you to go through the data in any order. You can go both forward and backward. You can even go to a specific spot in the data. 
Think of this like scrolling in a browser. You can scroll up and down. You can go to a specific spot in the result.

The difference between TYPE_SCROLL_INSENSITIVE and TYPE_SCROLL_SENSITIVE is what happens when data changes in the actual database
while you are busy scrolling. With TYPE_SCROLL_INSENSITIVE, you have a static view of what the ResultSet looked like when you did
the query. If the data changed in the table, you will see it as it was when you did the query. With TYPE_SCROLL_SENSITIVE, you 
would see the latest data when scrolling through the ResultSet.

We say “would” because most databases and database drivers don’t actually support the TYPE_SCROLL_SENSITIVE mode.

If the type you request isn’t available, the driver can "helpfully" downgrade to one that is. This means that if you ask for 
TYPE_SCROLL_SENSITIVE, you will likely get a Statement that is TYPE_SCROLL_INSENSITIVE.

---------------------------------------------------------------------------------------------------------------------------------
* Choosing a ResultSet Concurrency Mode
---------------------------------------------------------------------------------------------------------------------------------

By default, a ResultSet is in CONCUR_READ_ONLY mode. This is what you need most of the time. It means that you can’t update the
result set. Most of the time, you will use INSERT, UPDATE, or DELETE SQL statements to change the database rather than a
ResultSet.

There is one other mode that you can request when creating a Statement. Unsurprisingly, it lets you modify the database through 
the ResultSet. It is called CONCUR_UPDATABLE

Databases and JDBC drivers are not required to support CONCUR_UPDATABLE. Unlike TYPE_SCROLL_SENSITIVE, an updatable result set
is at least used on rare occasions. Most of the time, it is the wrong choice for your program, though. Again, if the mode you
request isn’t available, the driver can downgrade you. This means that if you ask for CONCUR_UPDATABLE , you will likely get a
Statement that is CONCUR_READ_ONLY.

---------------------------------------------------------------------------------------------------------------------------------
** Executing a Statement
---------------------------------------------------------------------------------------------------------------------------------

Let’s start out with statements that change the data in a table. That would be SQL statements that begin with DELETE, INSERT, or 
UPDATE. They typically use a method called executeUpdate(). The name is a little tricky because the SQL UPDATE statement is not 
the only statement that uses this method. The method takes the SQL statement to run as a parameter. It returns the number of rows
that were inserted, deleted, or changed. Here’s an example of all three update types:

11: Statement stmt = conn.createStatement();
12: int result = stmt.executeUpdate(
13: "insert into species values(10, 'Deer', 3)");
14: System.out.println(result); // 1
15: result = stmt.executeUpdate(
16: "update species set name = '' where name = 'None'");
17: System.out.println(result); // 0
18: result = stmt.executeUpdate(
19: "delete from species where id = 10");
20: System.out.println(result); // 1


Next, let’s look at a SQL statement that begins with SELECT. This time, we use the executeQuery() method:

ResultSet rs = stmt.executeQuery("select * from species");

Since we are running query to get a result, the return type is ResultSet.


There’s a third method called execute() that can run either a query or an update. It returns a boolean so that we know whether
there is a ResultSet. That way, we can call the proper method to get more detail. The pattern looks like this:

boolean isResultSet = stmt.execute(sql);
if (isResultSet) {
	ResultSet rs = stmt.getResultSet();
	System.out.println("ran a query");
} else {
	int result = stmt.getUpdateCount();
	System.out.println("ran an update");
}


If sql is a SELECT, the boolean is true and we can get the ResultSet. If it is not a SELECT, we can get the number of rows updated.


Real World Scenario

The Importance of a PreparedStatement

On the exam, only Statement is covered. In real life, you should not use Statement directly. You should use a subclass called 
PreparedStatement. This subclass has three advantages: performance, security, and readability.

- Performance: In most programs you run similar queries multiple times. A PreparedStatement figures out a plan to run the SQL well
and remembers it.
- Security: Suppose you have this method:
private static void scaryDelete(Connection conn, String name) throws SQLException {
	Statement stmt = conn.createStatement();
	String sql = "delete from animal where name = '" + name + "'";
	System.out.println(sql);
	stmt.executeUpdate(sql);
}
This method appears to delete the row that matches the given name. Imagine that this program lets a user type in the name. If the
user’s String is "Asian Elephant", this works out well and one row gets deleted. What happens if the user’s String is "any' or 1 = 1 
or name='any"? The generated SQL is delete from animal where name = 'any' or 1 = 1 or name='any'
This deletes every row in the table. That’s not good. In fact, it is so bad that it has a name—SQL injection. Upon first glance, 
the solution is to prevent single quotes in the user’s input. It turns out to be more complicated than that because the bad guys 
know many ways of doing bad things. Luckily, you can just write this:
PreparedStatement ps = conn.prepareStatement("delete from animal where name = ?");
ps.setString(1, name);
ps.execute();
The JDBC driver takes care of all the escaping for you. This is convenient.
- Readability: It’s nice not to have to deal with string concatenation in building a query string with lots of variables.


What do you think happens if we use the wrong method for a SQL statement? Let’s take a look:
Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
Statement stmt = conn.createStatement();
Executing a Statement 523
int result = stmt.executeUpdate("select * from animal");

This throws a SQLException similar to the following:
A result was returned when none was expected.

We can’t get a compiler error since the SQL is a String. We can get an exception, though, and we do. We also get a SQLException
when using executeQuery() with SQL that changes the database:

No results were returned by the query.

Again, we get an exception because the driver can’t translate the query into the expected return type.

---------------------------------------------------------------------------------------------------------------------------------
** Getting Data from a ResultSet
---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
* Reading a ResultSet
---------------------------------------------------------------------------------------------------------------------------------

20: Map<Integer, String> idToNameMap = new HashMap<>();
21: ResultSet rs = stmt.executeQuery("select id, name from species");
22: while(rs.next()) {
23: 	int id = rs.getInt("id");
24: 	String name = rs.getString("name");
25: 	idToNameMap.put(id, name);
26: }
27: System.out.println(idToNameMap); // {1=African Elephant, 2=Zebra}

A ResultSet has a cursor, which points to the current location in the data.

At line 21, the cursor starts out pointing to the location before the ResultSet. On the first loop iteration, rs.next() returns 
true and the cursor moves to point to the first row of data. On the second loop iteration, rs.next() returns true again and the 
cursor moves to point to the second row of data. The next call to rs.next() returns false. The cursor advances past the end of 
the data. The false signifies that there is no data available to get.


We did say the “best way.” There is another way to access the columns. You can use an index instead of a column name. The column
name is better because it is clearer what is going on when reading the code. It also allows you to change the SQL to reorder the
columns. Rewriting this same example with column numbers looks like the following:

20: Map<Integer, String> idToNameMap = new HashMap<>();
21: ResultSet rs = stmt. executeQuery ("select id, name from species");
22: while(rs.next()) {
23: int id = rs. getInt (1);
24: String name = rs. getString (2);
25: idToNameMap.put(id, name);
26: }
27: System.out.println(idToNameMap); // {1=African Elephant, 2=Zebra}

This time, you can see the column positions on lines 23 and 24. Notice how the columns are counted starting with 1 rather than 0. 
This is really important, so we will repeat it:
Remember that JDBC starts counting with one rather than zero.

Sometimes you want to get only one row from the table. Maybe you need only one piece of data. Or maybe the SQL is just returning
the number of rows in the table. When you want only one row, you use an if statement rather than a while loop:

ResultSet rs = stmt.executeQuery("select count(*) from animal");
if(rs.next())
	System.out.println(rs.getInt(1));


It is very important to check that rs.next() returns true before trying to call a getter on the ResultSet . That would throw a 
SQLException , so the if statement checks that it is safe to call. Alternatively, you can use the column name:

ResultSet rs = stmt.executeQuery("select count(*) from animal");
if(rs.next())
	System.out.println(rs.getInt("count"));

The following code throws a SQLException :
int id = rs. getInt (0); // BAD CODE


Attempting to access a column that does not exist throws a SQLException, as does getting data from a ResultSet when it isn’t 
pointing at a valid row. You need to be able to recognize such code.

To sum up this section, it is very important to remember the following:
- Always use an if statement or while loop when calling rs.next().
- Column indexes begin with 1.

---------------------------------------------------------------------------------------------------------------------------------
* Getting Data for a Column
---------------------------------------------------------------------------------------------------------------------------------
There are lots of get methods on the ResultSet interface. The first column shows the method name, and the second column shows the
type that Java returns. The third column shows the type name that could be in the database.

ResultSet get methods:
--------------------------------------------------------------------------
Method Name			Return Type					Example Database Type
--------------------------------------------------------------------------
getBoolean			boolean						BOOLEAN
getDate				java.sql.Date				DATE
getDouble			double						DOUBLE
getInt				int							INTEGER
getLong				long						BIGINT
getObject			Object						Any type
getString			String						CHAR, VARCHAR
getTime				java.sql.Time				TIME
getTimeStamp		java.sql.TimeStamp			TIMESTAMP

---------------------------------------------------------------------------

Convert to date // 2001-05-06
java.sql.Date sqlDate = rs.getDate(1);
LocalDate localDate = sqlDate.toLocalDate();

Convert to time	// 02:15
java.sql.Time sqlTime = rs.getTime(1);
LocalTime localTime = sqlTime.toLocalTime();

Convert to both -> date & time... timestamp	// 2001-05-06T02:15
java.sql.Timestamp sqlTimeStamp = rs.getTimestamp(1);
LocalDateTime localDateTime = sqlTimeStamp.toLocalDateTime();

---------------------------------------------------------------------------

JDBC date and time types

JDBC 					Type Java 8 Type 			Contains
java.sql.Date 			java.time.LocalDate 		Date only
java.sql.Time 			java.time.LocalTime 		Time only
java.sql.TimeStamp 		java.time.LocalDateTime 	Both date and time

---------------------------------------------------------------------------

Finally, the getObject method can return any type. For a primitive, it uses the wrapper class.
Later we check with instanceof if certain type is in question.

Object idField = rs.getObject("id");
Object nameField = rs.getObject("name");

if (idField instanceof Integer) {
	int id = (Integer) idField;
	...
	
if (nameField instanceof String) {
	String name = (String) nameField;
	...

---------------------------------------------------------------------------------------------------------------------------------
* Scrolling ResultSet
---------------------------------------------------------------------------------------------------------------------------------

We already saw methods for going through result set:
next()
previous()

A scrollable ResultSet allows you to position the cursor at any row:
beforeFirst() (has a return type of void and doesn't point to row in the Resultset)
afterLast() (has a return type of void and doesn't point to row in the Resultset)
first()
last()

This time it is a scrollable result set type, so we can call these extra methods. Make sure that the type is scrollable whenever
you see methods other than next().

Make sure that the type is scrollable whenever you see methods other than next().

absolute()

It takes the row number to which you want to move the cursor as a parameter. A positive number moves the cursor to that numbered
row. Zero moves the cursor to a location immediately before the first row. A negative number means to start counting from the end
of the ResultSet rather than from the beginning.

relative()

Finally, there is a relative() method that moves forward or backward the requested number of rows. It returns a boolean if the 
cursor is pointing to a row with data.

---------------------------------------------------------------------------------------------------------------------------------
** Closing Database Resources
---------------------------------------------------------------------------------------------------------------------------------

JDBC resources, such as a Connection, are expensive to create. Not closing them creates a resource leak that will eventually slow
down your program.

try-with-resources syntax:

try (Connection conn = DriverManager.getConnection(url);
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery("select name from animal")) {
	
	while (rs.next())
		System.out.println(rs.getString(1));
}


Remember that a try-with-resources statement closes the resources in the reverse order from which they were opened. This means
that the ResultSet is closed first, followed by the Statement, and then the Connection. This is the standard order to close
resources.

While it is a good habit to close all three resources, it isn’t strictly necessary. Closing a JDBC resource should close any
resources that it created. In particular, the following are true:
- Closing a Connection also closes the Statement and ResultSet.
- Closing a Statement also closes the ResultSet.

There’s another way to close a ResultSet. JDBC automatically closes a ResultSet when you run another SQL statement from the same
Statement.

It is very important to close resources in the right order.

---------------------------------------------------------------------------------------------------------------------------------
** Dealing with Exceptions
---------------------------------------------------------------------------------------------------------------------------------

} catch (SQLException e) {
	System.out.println(e.getMessage());
	System.out.println(e.getSQLState());
	System.out.println(e.getErrorCode());
}

Each of these methods gives you a different piece of information. The getMessage() method returns a human-readable message as to
what went wrong. The getSQLState() method returns a code as to what went wrong. You can Google the name of your database and the
SQL state to get more information about the error. By comparison, getErrorCode() is a database-specific code.

---------------------------------------------------------------------------------------------------------------------------------
** Summary
---------------------------------------------------------------------------------------------------------------------------------

On the exam, JDBC uses four key interfaces: Driver, Connection, Statement, and ResultSet. The interfaces are part of the Java 
API. A database-specific JAR file provides the implementations.

The DriverManager class provides a factory method called getConnection() to get a Connection implementation. Modern driver JARs 
contain a file in META-INF/service called java.sql.Driver. This is the name of the implementation class of Driver. Older JARs
do not, and they require Class.forName() to load the driver.

There are three ResultSet types that you can request when creating a Statement . If the type you request isn’t available, JDBC 
will downgrade your request to one that is available. The default, TYPE_FORWARD_ONLY, means that you can only go through the 
data in order. TYPE_SCROLL_INSENSITIVE means that you can go through the data in any order, but you won’t see changes made in the
database while you are scrolling. TYPE_SCROLL_SENSITIVE means that you can go through the data in any order, and you will see 
changes made in the database.

You can request either of two modes for ResultSet concurrency when creating a Statement. Again, JDBC will downgrade your request
if needed. The default, CONCUR_READ_ONLY, means that you can read the ResultSet but not write to it. CONCUR_UPDATABLE means that 
you can both read and write to it.

When running a SELECT SQL statement, the executeQuery() method returns a ResultSet. When running a DELETE, INSERT, or UPDATE SQL
statement, the executeUpdate() method returns the number of rows that were affected. There is also an execute() method that 
returns a boolean to indicate whether the statement was a query.

Column indexes begin with 1, not 0.

Aside from the primitive getters, there are getDate(), getTime(), and getTimeStamp().

For a scrollable result set, you can use methods to move to an absolute() position or relative() position. Scrolling to next() 
and previous() are also allowed. There are also methods to go to the first() and last() rows. All of these methods return true
if the cursor is pointing to a row with data. Other methods allow you to go outside the ResultSet with beforeFirst() and 
afterLast().

It is important to close JDBC resources when finished with them to avoid leaking resources. Closing a Connection automatically 
closes the Statement and ResultSet objects. Closing a Statement automatically closes the ResultSet object. Also, running another
SQL statement closes the previous ResultSet object from that Statement.

---------------------------------------------------------------------------------------------------------------------------------
** Exam Essentials
---------------------------------------------------------------------------------------------------------------------------------

Name the core four JDBC interfaces that you need to know for the exam and where they are defined. The four key interfaces are 
Driver, Connection, Statement, and ResultSet. The interfaces are part of the core Java APIs. The implementations are part of a 
database JAR file.

Identify correct and incorrect JDBC URLs. A JDBC URL starts with jdbc:, and it is followed by the vendor/product name. Next comes
another colon and then a database-specific connection string. This database-specific string includes the location, such as 
localhost or an IP address with an optional port. It also contains the name of the database.

Describe how to get a Connection using DriverManager. 
After including the driver JAR in the classpath, call DriverManager.getConnection(url) or 
DriverManager.getConnection(url, username, password) to get a driver-specific Connection implementation class.

Create a Statement using different options. When creating a Statement, you can use the defaults. Alternatively, you can specify 
the ResultSet type followed by the ResultSet concurrency mode. The options for ResultSet type are TYPE_FORWARD_ONLY, 
TYPE_SCROLL_INSENSITIVE, and TYPE_SCROLL_SENSITIVE. The options for ResultSet concurrency mode are CONCUR_READ_ONLY and 
CONCUR_UPDATABLE.

Choose which method on Statement to run given a SQL statement. For a SELECT SQL statement, use executeQuery() or execute(). For
other SQL statements, use executeUpdate() or execute().

Loop through a forward only ResultSet. Before trying to get data from a ResultSet, you call rs.next() inside an if statement or 
while loop. This ensures that the cursor is in a valid position. To get data from a column, call a method like getString(1) or 
getString("a"). Remember that column indexes begin with 1.

Navigate within a scrollable ResultSet. The rows in a ResultSet are numbered starting with 1. Calling absolute(4) moves the 
cursor to the fourth row. Calling absolute(0) moves the cursor to a location immediately before the result. Calling absolute(-1)
moves the cursor to the last row.

Identify when a resource should be closed. If you’re closing all three resources, the ResultSet must be closed first, followed 
by the Statement, and then followed by the Connection. Closing an object later in this list automatically closes those earlier 
in the list.

