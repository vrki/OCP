------------------------------------------------------------------------------------------------------------------------------------------------
*** Chapter 1 - Advanced Class Design
------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------
** Reviewing OCA Concepts
------------------------------------------------------------------------------------------------------------------------------------------------

Java SE Programmer I exam  (1Z0-808) [OCA] - done!
Java SE Programmer II exam (1Z0-809) [OCP]

------------------------------------------------------------------------------------------------------------------------------------------------
* Access Modifiers
------------------------------------------------------------------------------------------------------------------------------------------------
Careful with 'package' access:

This can be very tricky!

package cat;
public class BigCat {
	public String name = "cat";
	protected boolean hasFur = true;
	boolean hasPaws = true;
	private int id;
}

package cat.species;
public class Lynx extends BigCat { }

If we have situation like this and try to access 'directly' to hasPaws from Lynx class it will not work!

BigCat cat = new BigCat();
System.out.println(cat.hasPaws);

The reason is that we access the variable directly not through inheritance. The variable hasPows is visible only through classes via inheritance 
or in by same package. If we access the variable 'hasPaws' through inheritance like this:

Lynx cat - new Lynx();
System.out.println(cat.hasPaws);

Everything will be OK! Because this is access through inheritance instead of directly through instance of BigCat class.

------------------------------------------------------------------------------------------------------------------------------------------------
* Overloading and Overriding
------------------------------------------------------------------------------------------------------------------------------------------------
Both occur only when method name is the same!

Overloading:
Method parameters must vary by the type and/or number. When multiple overloaded methods are present, Java looks for the closest match first:
- Exact match by type
- Matching a superclass type
- Converting to a larger primitive type
- Converting to an autoboxed type
- Varargs
[see Overloading.java in the same package]

Overriding:
Occurs only when method signature is the same (method name and parameter list). There are few rules:
- The access modifier must be the same or more accessible.
- The return type must be the same or a more restrictive type, also known as "covariant return" types.
- If any checked exceptions are thrown, only the same exceptions or subclasses of those exceptions are allowed to be thrown.
- The methods must not be static. (If they are the method is hidden and not overridden.)

------------------------------------------------------------------------------------------------------------------------------------------------
* Abstract Classes
------------------------------------------------------------------------------------------------------------------------------------------------
