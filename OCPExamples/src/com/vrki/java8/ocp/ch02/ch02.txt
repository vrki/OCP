Construct interfaces that have neither methods nor class members, traditionally referred to as marker interfaces.

There are additional rules for default methods, such as Java failing to compile if a class or interface inherits two default
methods with the same signature and doesn’t provide its own implementation.


Purpose of the interface:
An interface provides a way for one individual to develop code that uses another individual’s code, without having access to 
the other individual’s underlying implementation. Interfaces can facilitate rapid application development by enabling development
teams to create applications in parallel, rather than being directly dependent on each other.

For example, two teams can work together to develop a one-page standard interface at the start of a project. One team then 
develops code that uses the interfaces while the other team develops code that implements the interface. The development teams
can then combine their implementations toward the end of the project, and as long as both teams developed with the same 
interface, they will be compatible. Of course, testing will still be required to make sure that the class implementing the 
interface behaves as expected.

---------------------------------------------------------------------------------------------------------------------------------
Real World Scenario:

Mock Objects:

You might wonder how a developer using the interface can build their code without access to a class that implements the 
interface. The developer using the interface can create a temporary mock object, sometimes referred to as dummy code, which
simulates the real object that implements the interface with a simple implementation. The mock object does not need to be 
very complex, with one line per abstract method, for example, as it only serves as a placeholder for the real implementation.
This allows the developer using the interface to compile, run, and test their code. 

For example, imagine that you were working on a racing application with the code that calculates the winners handled by a 
different team. Both your team and the other team agreed on a RaceManager interface, as shown in the following code, with your
team using the interface and the other team implementing it:

public class Animal {}
public class Tortoise extends Animal {}
public class Hare extends Animal {}
public interface RaceManager {
	public Animal getWinner(List<Animal> animals);
}

The good news is that your team has finished its part of the project first. The bad news is that the other team has nothing for
you to test with. While waiting for the other team to finish, you can create a mock version of the RaceManager class, as shown 
in the following sample code:

public class DummyRaceManager implements RaceManager {
	public Animal getWinner(List<Animal> animals) {
		return animals==null || animals.size()==0 ? null: animals.get(0);
	}
}

The code isn’t particularly intelligent; after all it just returns the first item in the list, but it is useful for testing 
purposes because it allows your team to execute your code while the other team finishes their implementation. You could also
write a version that always returns Tortoise or Hare. The goal is just to give you something temporary that you can work with
and that allows your code to compile, regardless of whether it works exactly as expected. After all, the full implementation of
getWinner() could be hundreds of lines long and based on very complex business rules.

---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
** Introducing Functional Programming
---------------------------------------------------------------------------------------------------------------------------------

Java defines a functional interface as an interface that contains a single abstract method. Functional interfaces are used as the
basis for lambda expressions in functional programming. A lambda expression is a block of code that gets passed around, like an 
anonymous method.

---------------------------------------------------------------------------------------------------------------------------------
** Defining a Functional Interface
---------------------------------------------------------------------------------------------------------------------------------

@FunctionalInterface
public interface Sprint {
	public void sprint(Animal animal);
}

public class Tiger implements Sprint {
	public void sprint(Animal animal) {
		System.out.println("Animal is sprinting fast! "+animal.toString());
	}
}

In this example, the Sprint class is a functional interface, because it contains exactly one abstract method, and the Tiger class
is a valid class that implements the interface.

Lambda expressions rely on the notion of deferred execution. Deferred execution means that code is specified now but runs later.
Even though the execution is deferred, the compiler will still validate that the code syntax is properly formed.

---------------------------------------------------------------------------------------------------------------------------------
** Understanding Lambda Syntax
---------------------------------------------------------------------------------------------------------------------------------

The left side of the arrow operator -> indicates the input parameters for the lambda expression.
The right side is referred to as the body of the lambda expression.

As mentioned, the data types for the input parameters of a lambda expression are optional. When one parameter has a data type 
listed, though, all parameters must provide a data type.

There is one more issue you might see with lambdas. We’ve been defining an argument list in our lambda expressions. Since Java
doesn’t allow us to re-declare a local variable, the following is an issue:

(a, b) -> { int a = 0; return 5;} // DOES NOT COMPILE

We tried to re-declare a, which is not allowed. By contrast, the following line is permitted because it uses a different variable
name:

(a, b) -> { int c = 0; return 5;}

---------------------------------------------------------------------------------------------------------------------------------
** Applying the Predicate Interface
---------------------------------------------------------------------------------------------------------------------------------
It’s in the package java.util.function:

public interface Predicate<T> {
	public boolean test(T t);
}


The result of using Predicate is that we no longer need our own functional interface. The following is a rewrite of our program
to use the Predicate class:

import java.util.function.Predicate;

public class FindMatchingAnimals {
	private static void print(Animal animal, Predicate<Animal> trait) {
	if(trait.test(animal))
		System.out.println(animal);
	}

	public static void main(String[] args) {
		print(new Animal("fish", false, true), a -> a.canHop());
		print(new Animal("kangaroo", true, false), a -> a.canHop());
	}
}

---------------------------------------------------------------------------------------------------------------------------------
** Implementing Polymorphism
---------------------------------------------------------------------------------------------------------------------------------

Polymorphism is the ability of a single interface to support multiple underlying forms. In Java, this allows multiple types of 
objects to be passed to a single method or class.

Polymorphism also allows one object to take on many different forms. As you may remember from studying for the OCA exam, a Java
object may be accessed using a reference with the same type as the object, a reference that is a superclass of the object, or
a reference that defines an interface that the object implements, either directly or through a superclass. Furthermore, a cast
is not required if the object is being reassigned to a supertype or interface of the object.

If you use a variable to refer to an object, then only the methods or variables that are part of the variable’s reference type
can be called without an explicit cast.

---------------------------------------------------------------------------------------------------------------------------------
** Distinguishing between an Object and a Reference
---------------------------------------------------------------------------------------------------------------------------------

In Java, all objects are accessed by reference, so as a developer you never have direct access to the memory of the object 
itself. Conceptually, though, you should consider the object as the entity that exists in memory, allocated by the Java runtime
environment. Regardless of the type of the reference that you have for the object in memory, the object itself doesn’t change.

For example, since all objects inherit java.lang.Object, they can all be reassigned to java.lang.Object:

Lemur lemur = new Lemur();
Object lemurAsObject = lemur;

Even though the Lemur object has been assigned a reference with a different type, the object itself has not changed and still
exists as a Lemur object in memory. What has changed, then, is our ability to access methods within the Lemur class with the 
lemurAsObject reference. Without an explicit cast back to Lemur, as you’ll see in the next section, we no longer have access to
the Lemur properties of the object.

Two rules:
1. The type of the object determines which properties exist within the object in memory.
2. The type of the reference to the object determines which methods and variables are accessible to the Java program.

---------------------------------------------------------------------------------------------------------------------------------
** Casting Object References
---------------------------------------------------------------------------------------------------------------------------------

Once we changed the reference type, though, we lost access to more specific methods defined in the subclass that still exists
within the object. We can reclaim those references by casting the object back to the specific subclass it came from:

Primate primate = lemur;
Lemur lemur2 = primate; // DOES NOT COMPILE
Lemur lemur3 = (Lemur)primate;
System.out.println(lemur3.age);

Here are some basic rules to keep in mind when casting variables:
1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
2. Casting an object from a superclass to a subclass requires an explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception may be thrown at runtime if the object being cast is not actually an
instance of that class.

public class Bird {}
public class Fish {
	public static void main(String[] args) {
	Fish fish = new Fish();
	Bird bird = (Fish)bird; // DOES NOT COMPILE
	}
}

In this example, the classes Fish and Bird are not related through any class hierarchy; therefore, the code will not compile.

Casting is not without its limitations. Even though two classes share a related hierarchy, that doesn’t mean an instance of 
one can automatically be cast to another. Here’s an example:

public class Rodent {
}
public class Capybara extends Rodent {
	public static void main(String[] args) {
		Rodent rodent = new Rodent();
		Capybara capybara = (Capybara)rodent; // Throws ClassCastException at runtime
	}
}

This code creates an instance of Rodent and then tries to cast it to a subclass of Rodent, Capybara. Although this code will
compile without issue, it will throw a ClassCastException at runtime since the object being referenced is not an instance of the
Capybara class. As you may recall from Chapter 1, you can use the instanceof operator prior to casting the object to avoid 
throwing ClassCastException at runtime:

if(rodent instanceof Capybara) {
	Capybara capybara = (Capybara)rodent;
}

---------------------------------------------------------------------------------------------------------------------------------
* Understanding Design Principles
---------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
* Encapsulating Data
---------------------------------------------------------------------------------------------------------------------------------

In software development, encapsulation is the idea of combining fields and methods in a class such that the methods operate on 
the data, as opposed to the users of the class accessing the fields directly.

The underlying idea of encapsulation is that no actor other than the class itself should have direct access to its data. The 
class is said to encapsulate the data it contains and prevent anyone from directly accessing it.

With encapsulation, a class is able to maintain certain invariants about its internal data. An invariant is a property or truth
that is maintained even after the data is modified. For example, imagine that we are designing a new Animal class, and we have 
the following design requirements:
- Each animal has a non-null , non-empty species field
- Each animal has an age field that is greater than or equal to zero

The goal of designing our Animal class would be to make sure that we never arrive at an instance of Animal that violates one of
these properties. By using private instance members along with getter and setter methods that validate the input data, we can 
ensure that these invariants remain true.

---------------------------------------------------------------------------------------------------------------------------------
* Creating JavaBeans
---------------------------------------------------------------------------------------------------------------------------------

JavaBean naming conventions:
- Properties are private.
- Getter for non-boolean properties begins with 'get'.
- Getters for boolean properties may begin with 'is' or 'get'.
- Setter methods begin with 'set'.
- The method name must have a prefix of set/get/is followed by the first letter of the property in uppercase and followed by the
rest of the property name.

Which of the following could be correctly included in a JavaBean?
public boolean isPlaying() { return playing; }
public boolean getPlaying() { return playing; }
public Boolean isDancing() { return dancing; }

The first line is correct because it defines a proper getter for a boolean variable.
The second example is also correct, since boolean may use is or get. 
The third line is incorrect, because a Boolean wrapper should start with get, since it is an object.

---------------------------------------------------------------------------------------------------------------------------------
* Applying the Is-a Relationship
---------------------------------------------------------------------------------------------------------------------------------

The is-a relationship is also known as the inheritance test.

The fundamental result of the is-a principle is that if A is-a B, then any instance of A can be treated like an instance of B. 
This holds true for a child that is a subclass of any parent, be it a direct subclass or a distant child. As we discussed with
polymorphism, objects can take many different forms.

When constructing an inheritance-based data model, it is important to apply the is-a relationship regularly, so that you are 
designing classes that conceptually make sense.

The is-a relationship test helps us avoid creating object models that contain contradictions. One solution in this example is to
not combine Tiger and Pet in the same model, preferring to write duplicate code rather than create inconsistent data. Another
solution might be to use the multi-inheritance properties of interfaces and declare Pet an interface rather than a parent class.

---------------------------------------------------------------------------------------------------------------------------------
* Applying the Has-a Relationship
---------------------------------------------------------------------------------------------------------------------------------

In object-oriented design, we often want to test whether an object contains a particular property or value. We refer to the has-a
relationship as the property of an object having a named data object or primitive as a member. The has-a relationship is also 
known as the object composition test, described in the next section.

Inheritance goes one step further by allowing us to say that any child of Bird must also have a Beak. More generally, if a parent
has-a object as a protected or public member, then any child of the parent must also have that object as a member. Note that this
does not hold true for private members defined in parent classes, because private members are not inherited in Java.

---------------------------------------------------------------------------------------------------------------------------------
* Composing Objects
---------------------------------------------------------------------------------------------------------------------------------

In object-oriented design, we refer to object composition as the property of constructing a class using references to other 
classes in order to reuse the functionality of the other classes. In particular, the class contains the other classes in the
has-a sense and may delegate methods to the other classes.

Object composition should be thought of as an alternate to inheritance and is often used to simulate polymorphic behavior that 
cannot be achieved via single inheritance.

One of the advantages of object composition over inheritance is that it tends to promote greater code reuse. By using object
composition, you gain access to other classes and methods that would be difficult to obtain via Java’s single-inheritance model.

Object composition may seem more attractive than inheritance because of its reusable nature, but bear in mind that one of the 
strengths of Java is its powerful inheritance model. Object composition still requires you to explicitly expose the underlying 
methods and values manually, whereas inheritance includes protected and public members automatically. Also, using method 
overloading to determine dynamically which method to select at runtime is an extremely powerful tool for building intelligent 
classes. In other words, both object composition and inheritance have their proper place in developing good code, and in many 
cases it may be difficult to decide which path to choose.



Page: 75
